#!/bin/bash

"exec" "python" "-u" "-Wignore" "$0" "$@"


import os
import sys
import signal
import commands
import optparse
import threading

import pandatools.PSequence
from pandatools.FetcherFactory import fetcherFactory


# worker to run sequence
class Worker (threading.Thread):
    def __init__(self,arg,fet,sn,verbose):
        threading.Thread.__init__(self)
        self.verbose = verbose
        self.seq = pandatools.PSequence.PSequence(arg,fet,sn)
            
    def run(self):
        self.seq.run(self.verbose)


# main        
def main(args,verbose):
    # instantiate worker per sequence
    workers = []
    for sn,arg in enumerate(args):
        workers.append(Worker(arg,fetcherFactory,sn,verbose))
    # start workers
    for thr in workers:
        thr.start()


# kill whole process
def catch_sig(sig, frame):
    # kill
    commands.getoutput('kill -9 -- -%s' % os.getpgrp())
        

if __name__ == "__main__":
    # parse option
    parser = optparse.OptionParser()
    parser.add_option("-v",action="store_true",dest="verbose",default=False,
                      help="verbose")
    parser.add_option('--version',action='store_const',const=True,dest='version',default=False,
                      help='Displays version')
    
    options, args = parser.parse_args()

    # display version
    if options.version:
        from pandatools import PandaToolsPkgInfo
        print "Version: %s" % PandaToolsPkgInfo.release_version
        sys.exit(0)

    # fork for Ctl-c
    fork_child_pid = os.fork()
    if fork_child_pid == -1:
        print "ERROR : Failed to fork"
        sys.exit(1)
    if fork_child_pid == 0:
        main(args,options.verbose)
    else:
        # set handler
        signal.signal(signal.SIGINT, catch_sig)
        signal.signal(signal.SIGHUP, catch_sig)
        signal.signal(signal.SIGTERM,catch_sig)
        os.wait()
        
